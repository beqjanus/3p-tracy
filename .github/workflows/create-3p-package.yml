name: Build Tracy binaries and 3p-package
on:
  workflow_dispatch:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
env:
  AUTOBUILD_VARIABLES_FILE: ${{github.workspace}}/build-variables/variables
  EXTRA_ARGS: -DFMODSTUDIO=Off -DUSE_KDU=Off
jobs:
  build-tracy:
    strategy:
      matrix:
        os: [macos-12,ubuntu-24.04,windows-2022]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
    - if: startsWith( matrix.os, 'windows')
      uses: microsoft/setup-msbuild@v2
    - uses: actions/setup-python@v5
      id: py311
      with:
        python-version: '3.11'
    - name: Set PYTHON environment for CMake
      run: |
        echo "PYTHON=${{ steps.py311.outputs.python-path }}" >> $GITHUB_ENV
      shell: bash
    - name: Install python requirements (win).
      if: startsWith(matrix.os, 'windows')
      run: pip install meson ninja
    - name: Install requirements (mac).
      if: startsWith( matrix.os, 'macos')
      run: |
        brew install pkg-config glfw meson
    - name: Install requirements (linux).
      if: startsWith( matrix.os, 'ubuntu')
      run: |
        # sudo add-apt-repository ppa:oibaf/graphics-drivers
        sudo apt update && sudo apt upgrade -y && sudo apt install -y libfreetype6 libtbbmalloc2 elfutils libwayland-dev libdbus-1-dev libxkbcommon-dev libglvnd-dev meson cmake git wayland-protocols nodejs
    - name: Get the repo
      uses: actions/checkout@v4
      with:
        repository: wolfpld/tracy
        path: tracy
        fetch-depth: 0
    - name: debug dump tree
      if: startsWith( matrix.os, 'windows')
      run: tree /F ${{github.workspace}}\tracy
    - name: Set CXX_FLAGS
      run: |
        if [[ "${{ matrix.os }}" == "ubuntu-24.04" ]]; then
          echo "CXX_FLAGS=${CXX_FLAGS} -Wno-stringop-overflow" >> $GITHUB_ENV
        else
          echo "CXX_FLAGS=${CXX_FLAGS}" >> $GITHUB_ENV
        fi   
      shell: bash
    - name: checkout the most recent tag
      if: ${{ !contains(github.ref_name,'useCMake') }}
      run: |
        tracy_version=$(cd ${{github.workspace}}/tracy && git fetch --tags && git describe --tags --abbrev=0)
        echo "Using Tracy version $tracy_version"
        # Checkout latest tag
        cd ${{github.workspace}}/tracy && git checkout $tracy_version
      shell: bash
    - name: Profiler GUI
      working-directory: ${{github.workspace}}/tracy
      run: |
        cmake -B profiler/build -S profiler -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="$CXX_FLAGS"
        cmake --build profiler/build --config Release --parallel
    - name: Update utility
      working-directory: ${{github.workspace}}/tracy
      run: |
        cmake -B update/build -S update -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="$CXX_FLAGS"
        cmake --build update/build --config Release --parallel
    - name: Capture utility
      working-directory: ${{github.workspace}}/tracy
      run: |
        cmake -B capture/build -S capture -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="$CXX_FLAGS"
        cmake --build capture/build --config Release --parallel
    - name: Csvexport utility
      working-directory: ${{github.workspace}}/tracy
      run: |
        cmake -B csvexport/build -S csvexport -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="$CXX_FLAGS"
        cmake --build csvexport/build --config Release --parallel
    - name: Import-chrome utility
      working-directory: ${{github.workspace}}/tracy
      run: |
        cmake -B import-chrome/build -S import-chrome -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="$CXX_FLAGS"
        cmake --build import-chrome/build --config Release --parallel
    - name: Import-fuchsia utility
      working-directory: ${{github.workspace}}/tracy
      run: |
        cmake -B import-fuchsia/build -S import-fuchsia -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_FLAGS="$CXX_FLAGS"
        cmake --build import-fuchsia/build --config Release --parallel
    - if: ${{ !startsWith(matrix.os, 'windows') }}
      name: Library
      working-directory: ${{github.workspace}}/tracy
      run: meson setup -Dprefix=$GITHUB_WORKSPACE/bin/lib build && meson compile -C build && meson install -C build        
    - if: ${{ startsWith(matrix.os, 'windows') }}
      name: Library (win)
      working-directory: ${{github.workspace}}/tracy
      run: msbuild ${{github.workspace}}\tracy\library\win32\TracyProfiler.vcxproj /property:Configuration=Release /property:Platform=x64
    # - if: ${{ startsWith(matrix.os, 'ubuntu') }}
    #   name: Test application (linux only for now)
    #   run: |
    #     make -j`nproc` -C test
    #     make -j`nproc` -C test clean
    #     make -j`nproc` -C test TRACYFLAGS=-DTRACY_ON_DEMAND
    #     make -j`nproc` -C test clean
    #     make -j`nproc` -C test TRACYFLAGS="-DTRACY_DELAYED_INIT -DTRACY_MANUAL_LIFETIME"
    #     make           -C test -B ../public/TracyClient.o DEFINES='-DTRACY_DEMANGLE'
    - if: ${{ startsWith(matrix.os, 'windows') }}
      name: Package binaries (win)
      working-directory: ${{github.workspace}}/tracy
      run: |
        mkdir bin
        mkdir bin/dev
        cp profiler/build/Release/tracy-profiler.exe bin
        cp update/build/Release/tracy-update.exe bin
        cp capture/build/Release/tracy-capture.exe bin
        cp import-chrome/build/Release/tracy-import-chrome.exe bin
        cp csvexport/build/Release/tracy-csvexport.exe bin
        cp library/win32/x64/Release/TracyProfiler.dll bin/dev
        cp library/win32/x64/Release/TracyProfiler.lib bin/dev
        zip -r Tracy-${{matrix.os}}.zip bin
      shell: bash
    - if: ${{ !startsWith(matrix.os, 'windows') }}
      name: Package binaries (mac,linux)
      working-directory: ${{github.workspace}}/tracy
      run: |
        mkdir bin
        mkdir bin/dev
        cp profiler/build/tracy-profiler bin
        cp update/build/tracy-update bin
        cp capture/build/tracy-capture bin
        cp csvexport/build/tracy-csvexport bin
        cp import-chrome/build/tracy-import-chrome bin
        cp import-fuchsia/build/tracy-import-fuchsia bin
        zip -r Tracy-${{matrix.os}}.zip bin
      shell: bash
    - name: install autobuild
      run: pip3 install llbase autobuild llsd
    - name: Checkout build var
      uses: actions/checkout@v4
      with:
        repository: FirestormViewer/fs-build-variables
        path: build-variables
    - name: package the 3p-archive
      run: |
        autobuild build --config-file=autobuild.xml
        autobuild package --config-file=autobuild.xml
      shell: bash
    - uses: actions/upload-artifact@v4
      with:
        name: Tracy-Artifacts-${{matrix.os}}
        path: |
          tracy\Tracy-${{matrix.os}}.zip
          *.bz2

